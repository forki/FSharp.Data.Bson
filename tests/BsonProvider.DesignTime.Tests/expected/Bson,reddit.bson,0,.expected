class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/reddit.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> kind:string -> data:BsonProvider+Data -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("kind",
                                   (kind :> obj))
                                  ("data",
                                   (data :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Data: BsonProvider+Data with get
    BsonRuntime.GetPropertyPacked(this, "data")

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member Kind: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "kind")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Data : BsonProvider.Runtime.IBsonTop
    new : modhash:string -> children:BsonProvider+Child[] -> after:string -> before:MongoDB.Bson.BsonValue -> BsonProvider+Data
    BsonRuntime.CreateDocument([| ("modhash",
                                   (modhash :> obj))
                                  ("children",
                                   (children :> obj))
                                  ("after",
                                   (after :> obj))
                                  ("before",
                                   (before :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Data
    BsonTop.Create(bsonValue, "")

    member After: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "after")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Before: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "before")

    member Children: BsonProvider+Child[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "children"), new Func<_,_>(id)))

    member Modhash: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "modhash")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Child : BsonProvider.Runtime.IBsonTop
    new : kind:string -> data:BsonProvider+Data2 -> BsonProvider+Child
    BsonRuntime.CreateDocument([| ("kind",
                                   (kind :> obj))
                                  ("data",
                                   (data :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Child
    BsonTop.Create(bsonValue, "")

    member Data: BsonProvider+Data2 with get
    BsonRuntime.GetPropertyPacked(this, "data")

    member Kind: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "kind")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Data2 : BsonProvider.Runtime.IBsonTop
    new : subredditId:string -> linkTitle:string -> bannedBy:MongoDB.Bson.BsonValue -> subreddit:string -> linkAuthor:string -> likes:MongoDB.Bson.BsonValue -> replies:MongoDB.Bson.BsonValue -> saved:bool -> id:string -> gilded:int -> author:string -> parentId:string -> approvedBy:MongoDB.Bson.BsonValue -> body:string -> edited:bool -> authorFlairCssClass:MongoDB.Bson.BsonValue -> downs:int -> bodyHtml:string -> linkId:string -> scoreHidden:bool -> name:string -> created:int -> authorFlairText:MongoDB.Bson.BsonValue -> linkUrl:string -> createdUtc:int -> ups:int -> numReports:MongoDB.Bson.BsonValue -> distinguished:MongoDB.Bson.BsonValue -> BsonProvider+Data2
    BsonRuntime.CreateDocument([| ("subreddit_id",
                                   (subredditId :> obj))
                                  ("link_title",
                                   (linkTitle :> obj))
                                  ("banned_by",
                                   (bannedBy :> obj))
                                  ("subreddit",
                                   (subreddit :> obj))
                                  ("link_author",
                                   (linkAuthor :> obj))
                                  ("likes",
                                   (likes :> obj))
                                  ("replies",
                                   (replies :> obj))
                                  ("saved",
                                   (saved :> obj))
                                  ("id",
                                   (id :> obj))
                                  ("gilded",
                                   (gilded :> obj))
                                  ("author",
                                   (author :> obj))
                                  ("parent_id",
                                   (parentId :> obj))
                                  ("approved_by",
                                   (approvedBy :> obj))
                                  ("body",
                                   (body :> obj))
                                  ("edited",
                                   (edited :> obj))
                                  ("author_flair_css_class",
                                   (authorFlairCssClass :> obj))
                                  ("downs",
                                   (downs :> obj))
                                  ("body_html",
                                   (bodyHtml :> obj))
                                  ("link_id",
                                   (linkId :> obj))
                                  ("score_hidden",
                                   (scoreHidden :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("created",
                                   (created :> obj))
                                  ("author_flair_text",
                                   (authorFlairText :> obj))
                                  ("link_url",
                                   (linkUrl :> obj))
                                  ("created_utc",
                                   (createdUtc :> obj))
                                  ("ups",
                                   (ups :> obj))
                                  ("num_reports",
                                   (numReports :> obj))
                                  ("distinguished",
                                   (distinguished :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Data2
    BsonTop.Create(bsonValue, "")

    member ApprovedBy: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "approved_by")

    member Author: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member AuthorFlairCssClass: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "author_flair_css_class")

    member AuthorFlairText: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "author_flair_text")

    member BannedBy: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "banned_by")

    member Body: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "body")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member BodyHtml: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "body_html")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Created: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "created")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member CreatedUtc: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_utc")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Distinguished: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "distinguished")

    member Downs: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "downs")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Edited: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "edited")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Gilded: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "gilded")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Id: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Likes: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "likes")

    member LinkAuthor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_author")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member LinkId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member LinkTitle: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_title")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member LinkUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member NumReports: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "num_reports")

    member ParentId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "parent_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Replies: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "replies")

    member Saved: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "saved")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member ScoreHidden: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "score_hidden")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Subreddit: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "subreddit")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SubredditId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "subreddit_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Ups: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "ups")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)


