class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/optionals.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> recordProperty:BsonProvider+RecordProperty -> nullProperty:MongoDB.Bson.BsonValue -> emptyStringProperty:string -> emptyArrayProperty:MongoDB.Bson.BsonValue[] -> oneElementArrayProperty:int[] -> multipleElementsArrayProperty:int[] -> arrayOfObjects:BsonProvider+ArrayOfObject[] -> optionalPrimitives:BsonProvider+OptionalPrimitive[] -> optionalRecords:BsonProvider+OptionalRecord[] -> heterogeneousArray:BsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray -> heterogeneousRecords:BsonProvider+HeterogeneousRecord[] -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("recordProperty",
                                   (recordProperty :> obj))
                                  ("nullProperty",
                                   (nullProperty :> obj))
                                  ("emptyStringProperty",
                                   (emptyStringProperty :> obj))
                                  ("emptyArrayProperty",
                                   (emptyArrayProperty :> obj))
                                  ("oneElementArrayProperty",
                                   (oneElementArrayProperty :> obj))
                                  ("multipleElementsArrayProperty",
                                   (multipleElementsArrayProperty :> obj))
                                  ("arrayOfObjects",
                                   (arrayOfObjects :> obj))
                                  ("optionalPrimitives",
                                   (optionalPrimitives :> obj))
                                  ("optionalRecords",
                                   (optionalRecords :> obj))
                                  ("heterogeneousArray",
                                   (heterogeneousArray :> obj))
                                  ("heterogeneousRecords",
                                   (heterogeneousRecords :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member ArrayOfObjects: BsonProvider+ArrayOfObject[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "arrayOfObjects"), new Func<_,_>(id)))

    member EmptyArrayProperty: BsonProvider.Runtime.IBsonTop[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "emptyArrayProperty"), new Func<_,_>(id)))

    member EmptyStringProperty: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "emptyStringProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member HeterogeneousArray: BsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray with get
    BsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousArray")

    member HeterogeneousRecords: BsonProvider+HeterogeneousRecord[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousRecords"), new Func<_,_>(id)))

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member MultipleElementsArrayProperty: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "multipleElementsArrayProperty"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member NullProperty: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "nullProperty")

    member OneElementArrayProperty: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "oneElementArrayProperty"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member OptionalPrimitives: BsonProvider+OptionalPrimitive[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "optionalPrimitives"), new Func<_,_>(id)))

    member OptionalRecords: BsonProvider+OptionalRecord[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "optionalRecords"), new Func<_,_>(id)))

    member RecordProperty: BsonProvider+RecordProperty with get
    BsonRuntime.GetPropertyPacked(this, "recordProperty")


class BsonProvider+ArrayOfObject : BsonProvider.Runtime.IBsonTop
    new : heterogeneousArrayProperty:BsonProvider+NumbersOrBooleanOrString -> heterogeneousProperty:BsonProvider+IntOrBooleanOrString -> heterogeneousOptionalProperty:BsonProvider+IntOrBoolean -> BsonProvider+ArrayOfObject
    BsonRuntime.CreateDocument([| ("heterogeneousArrayProperty",
                                   (heterogeneousArrayProperty :> obj))
                                  ("heterogeneousProperty",
                                   (heterogeneousProperty :> obj))
                                  ("heterogeneousOptionalProperty",
                                   (heterogeneousOptionalProperty :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+ArrayOfObject
    BsonTop.Create(bsonValue, "")

    member HeterogeneousArrayProperty: BsonProvider+NumbersOrBooleanOrString with get
    BsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousArrayProperty")

    member HeterogeneousOptionalProperty: BsonProvider+IntOrBoolean with get
    BsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousOptionalProperty")

    member HeterogeneousProperty: BsonProvider+IntOrBooleanOrString with get
    BsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousProperty")


class BsonProvider+HeterogeneousRecord : BsonProvider.Runtime.IBsonTop
    new : b:BsonProvider+IntOrBooleanOrArrayOrB -> BsonProvider+HeterogeneousRecord
    BsonRuntime.CreateDocument([| ("b",
                                   (b :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+HeterogeneousRecord
    BsonTop.Create(bsonValue, "")

    member B: BsonProvider+IntOrBooleanOrArrayOrB with get
    BsonRuntime.GetPropertyPackedOrNull(this, "b")


class BsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray : BsonProvider.Runtime.IBsonTop
    new : number:int -> boolean:bool -> arrays:BsonProvider+NumbersOrBooleanOrHeterogeneousArray[] -> record:BsonProvider+OptionalBecauseMissing -> BsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray
    BsonRuntime.CreateArray([| (number :> obj)
                               (boolean :> obj)
                               (arrays :> obj)
                               (record :> obj) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray
    BsonTop.Create(bsonValue, "")

    member Arrays: BsonProvider+NumbersOrBooleanOrHeterogeneousArray[] with get
    BsonRuntime.GetArrayChildrenByTypeTag(this, "Array", new Func<_,_>(id)))

    member Boolean: bool with get
    let value = BsonRuntime.GetArrayChildByTypeTag(this, "Boolean")
    BsonRuntime.GetNonOptionalValue(value.Path(), BsonRuntime.ConvertBoolean(Some value.BsonValue), Some value.BsonValue)

    member Number: int with get
    let value = BsonRuntime.GetArrayChildByTypeTag(this, "Number")
    BsonRuntime.GetNonOptionalValue(value.Path(), BsonRuntime.ConvertInteger(Some value.BsonValue), Some value.BsonValue)

    member Record: BsonProvider+OptionalBecauseMissing with get
    BsonRuntime.GetArrayChildByTypeTag(this, "Record@heterogeneousArray")


class BsonProvider+OptionalPrimitive : BsonProvider.Runtime.IBsonTop
    new : optionalBecauseMissing:int option -> optionalBecauseNull:int option -> optionalBecauseEmptyString:BsonProvider+IntOrString -> notOptional:BsonProvider+IntOrString -> nullNotOptional:MongoDB.Bson.BsonValue -> BsonProvider+OptionalPrimitive
    BsonRuntime.CreateDocument([| ("optionalBecauseMissing",
                                   (optionalBecauseMissing :> obj))
                                  ("optionalBecauseNull",
                                   (optionalBecauseNull :> obj))
                                  ("optionalBecauseEmptyString",
                                   (optionalBecauseEmptyString :> obj))
                                  ("notOptional",
                                   (notOptional :> obj))
                                  ("nullNotOptional",
                                   (nullNotOptional :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+OptionalPrimitive
    BsonTop.Create(bsonValue, "")

    member NotOptional: BsonProvider+IntOrString with get
    BsonRuntime.GetPropertyPackedOrNull(this, "notOptional")

    member NullNotOptional: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "nullNotOptional")

    member OptionalBecauseEmptyString: BsonProvider+IntOrString with get
    BsonRuntime.GetPropertyPackedOrNull(this, "optionalBecauseEmptyString")

    member OptionalBecauseMissing: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseMissing"))

    member OptionalBecauseNull: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseNull"))


class BsonProvider+OptionalRecord : BsonProvider.Runtime.IBsonTop
    new : optionalBecauseMissing:BsonProvider+OptionalBecauseMissing option -> optionalBecauseNull:BsonProvider+OptionalBecauseMissing option -> optionalBecauseEmptyString:BsonProvider+StringOrOptionalBecauseEmptyString -> notOptional:BsonProvider+OptionalBecauseMissing -> BsonProvider+OptionalRecord
    BsonRuntime.CreateDocument([| ("optionalBecauseMissing",
                                   (optionalBecauseMissing :> obj))
                                  ("optionalBecauseNull",
                                   (optionalBecauseNull :> obj))
                                  ("optionalBecauseEmptyString",
                                   (optionalBecauseEmptyString :> obj))
                                  ("notOptional",
                                   (notOptional :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+OptionalRecord
    BsonTop.Create(bsonValue, "")

    member NotOptional: BsonProvider+OptionalBecauseMissing with get
    BsonRuntime.GetPropertyPacked(this, "notOptional")

    member OptionalBecauseEmptyString: BsonProvider+StringOrOptionalBecauseEmptyString with get
    BsonRuntime.GetPropertyPackedOrNull(this, "optionalBecauseEmptyString")

    member OptionalBecauseMissing: BsonProvider+OptionalBecauseMissing option with get
    BsonRuntime.TryGetPropertyPacked(this, "optionalBecauseMissing")

    member OptionalBecauseNull: BsonProvider+OptionalBecauseMissing option with get
    BsonRuntime.TryGetPropertyPacked(this, "optionalBecauseNull")


class BsonProvider+RecordProperty : BsonProvider.Runtime.IBsonTop
    new : stringProperty:string -> intProperty:int -> int64Property:int64 -> decimalProperty:float -> floatProperty:float -> boolProperty:bool -> dateProperty:string -> guidProperty:string -> BsonProvider+RecordProperty
    BsonRuntime.CreateDocument([| ("stringProperty",
                                   (stringProperty :> obj))
                                  ("intProperty",
                                   (intProperty :> obj))
                                  ("int64Property",
                                   (int64Property :> obj))
                                  ("decimalProperty",
                                   (decimalProperty :> obj))
                                  ("floatProperty",
                                   (floatProperty :> obj))
                                  ("boolProperty",
                                   (boolProperty :> obj))
                                  ("dateProperty",
                                   (dateProperty :> obj))
                                  ("guidProperty",
                                   (guidProperty :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+RecordProperty
    BsonTop.Create(bsonValue, "")

    member BoolProperty: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "boolProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member DateProperty: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "dateProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member DecimalProperty: float with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "decimalProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertFloat(value.BsonOpt), value.BsonOpt)

    member FloatProperty: float with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "floatProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertFloat(value.BsonOpt), value.BsonOpt)

    member GuidProperty: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "guidProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Int64Property: int64 with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "int64Property")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger64(value.BsonOpt), value.BsonOpt)

    member IntProperty: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "intProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member StringProperty: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "stringProperty")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+IntOrBoolean : BsonProvider.Runtime.IBsonTop
    new : number:int -> BsonProvider+IntOrBoolean
    BsonRuntime.CreateValue((number :> obj))

    new : boolean:bool -> BsonProvider+IntOrBoolean
    BsonRuntime.CreateValue((boolean :> obj))

    new : () -> BsonProvider+IntOrBoolean
    BsonRuntime.CreateValue(null)

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+IntOrBoolean
    BsonTop.Create(bsonValue, "")

    member Boolean: bool option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Boolean", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertBoolean(Some t.BsonValue), Some t.BsonValue)))

    member Number: int option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))


class BsonProvider+IntOrBooleanOrArrayOrB : BsonProvider.Runtime.IBsonTop
    new : number:int -> BsonProvider+IntOrBooleanOrArrayOrB
    BsonRuntime.CreateValue((number :> obj))

    new : boolean:bool -> BsonProvider+IntOrBooleanOrArrayOrB
    BsonRuntime.CreateValue((boolean :> obj))

    new : array:BsonProvider+NumbersOrBooleanOrB -> BsonProvider+IntOrBooleanOrArrayOrB
    BsonRuntime.CreateValue((array :> obj))

    new : record:BsonProvider+OptionalBecauseMissing -> BsonProvider+IntOrBooleanOrArrayOrB
    BsonRuntime.CreateValue((record :> obj))

    new : () -> BsonProvider+IntOrBooleanOrArrayOrB
    BsonRuntime.CreateValue(null)

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+IntOrBooleanOrArrayOrB
    BsonTop.Create(bsonValue, "")

    member Array: BsonProvider+NumbersOrBooleanOrB option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Array", new Func<_,_>(id)))

    member Boolean: bool option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Boolean", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertBoolean(Some t.BsonValue), Some t.BsonValue)))

    member Number: int option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Record: BsonProvider+OptionalBecauseMissing option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Record@b", new Func<_,_>(id)))


class BsonProvider+IntOrBooleanOrString : BsonProvider.Runtime.IBsonTop
    new : number:int -> BsonProvider+IntOrBooleanOrString
    BsonRuntime.CreateValue((number :> obj))

    new : boolean:bool -> BsonProvider+IntOrBooleanOrString
    BsonRuntime.CreateValue((boolean :> obj))

    new : string:string -> BsonProvider+IntOrBooleanOrString
    BsonRuntime.CreateValue((string :> obj))

    new : () -> BsonProvider+IntOrBooleanOrString
    BsonRuntime.CreateValue(null)

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+IntOrBooleanOrString
    BsonTop.Create(bsonValue, "")

    member Boolean: bool option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Boolean", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertBoolean(Some t.BsonValue), Some t.BsonValue)))

    member Number: int option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member String: string option with get
    BsonRuntime.TryGetValueByTypeTag(this, "String", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertString(Some t.BsonValue), Some t.BsonValue)))


class BsonProvider+IntOrString : BsonProvider.Runtime.IBsonTop
    new : number:int -> BsonProvider+IntOrString
    BsonRuntime.CreateValue((number :> obj))

    new : string:string -> BsonProvider+IntOrString
    BsonRuntime.CreateValue((string :> obj))

    new : () -> BsonProvider+IntOrString
    BsonRuntime.CreateValue(null)

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+IntOrString
    BsonTop.Create(bsonValue, "")

    member Number: int option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member String: string option with get
    BsonRuntime.TryGetValueByTypeTag(this, "String", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertString(Some t.BsonValue), Some t.BsonValue)))


class BsonProvider+NumbersOrBooleanOrHeterogeneousArray : BsonProvider.Runtime.IBsonTop
    new : numbers:int[] -> boolean:bool option -> record:BsonProvider+OptionalBecauseMissing option -> BsonProvider+NumbersOrBooleanOrHeterogeneousArray
    BsonRuntime.CreateArray([| (numbers :> obj)
                               (boolean :> obj)
                               (record :> obj) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+NumbersOrBooleanOrHeterogeneousArray
    BsonTop.Create(bsonValue, "")

    member Boolean: bool option with get
    BsonRuntime.TryGetArrayChildByTypeTag(this, "Boolean", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertBoolean(Some t.BsonValue), Some t.BsonValue)))

    member Numbers: int[] with get
    BsonRuntime.GetArrayChildrenByTypeTag(this, "Number", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Record: BsonProvider+OptionalBecauseMissing option with get
    BsonRuntime.TryGetArrayChildByTypeTag(this, "Record@heterogeneousArray", new Func<_,_>(id)))


class BsonProvider+NumbersOrBooleanOrString : BsonProvider.Runtime.IBsonTop
    new : numbers:int[] -> boolean:bool -> string:string option -> BsonProvider+NumbersOrBooleanOrString
    BsonRuntime.CreateArray([| (numbers :> obj)
                               (boolean :> obj)
                               (string :> obj) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+NumbersOrBooleanOrString
    BsonTop.Create(bsonValue, "")

    member Boolean: bool with get
    let value = BsonRuntime.GetArrayChildByTypeTag(this, "Boolean")
    BsonRuntime.GetNonOptionalValue(value.Path(), BsonRuntime.ConvertBoolean(Some value.BsonValue), Some value.BsonValue)

    member Numbers: int[] with get
    BsonRuntime.GetArrayChildrenByTypeTag(this, "Number", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member String: string option with get
    BsonRuntime.TryGetArrayChildByTypeTag(this, "String", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertString(Some t.BsonValue), Some t.BsonValue)))


class BsonProvider+OptionalBecauseMissing : BsonProvider.Runtime.IBsonTop
    new : a:int -> BsonProvider+OptionalBecauseMissing
    BsonRuntime.CreateDocument([| ("a",
                                   (a :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+OptionalBecauseMissing
    BsonTop.Create(bsonValue, "")

    member A: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "a")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)


class BsonProvider+StringOrOptionalBecauseEmptyString : BsonProvider.Runtime.IBsonTop
    new : string:string -> BsonProvider+StringOrOptionalBecauseEmptyString
    BsonRuntime.CreateValue((string :> obj))

    new : record:BsonProvider+OptionalBecauseMissing -> BsonProvider+StringOrOptionalBecauseEmptyString
    BsonRuntime.CreateValue((record :> obj))

    new : () -> BsonProvider+StringOrOptionalBecauseEmptyString
    BsonRuntime.CreateValue(null)

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+StringOrOptionalBecauseEmptyString
    BsonTop.Create(bsonValue, "")

    member Record: BsonProvider+OptionalBecauseMissing option with get
    BsonRuntime.TryGetValueByTypeTag(this, "Record@optionalBecauseEmptyString", new Func<_,_>(id)))

    member String: string option with get
    BsonRuntime.TryGetValueByTypeTag(this, "String", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertString(Some t.BsonValue), Some t.BsonValue)))


class BsonProvider+NumbersOrBooleanOrB : BsonProvider.Runtime.IBsonTop
    new : numbers:int[] -> boolean:bool option -> record:BsonProvider+OptionalBecauseMissing option -> BsonProvider+NumbersOrBooleanOrB
    BsonRuntime.CreateArray([| (numbers :> obj)
                               (boolean :> obj)
                               (record :> obj) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+NumbersOrBooleanOrB
    BsonTop.Create(bsonValue, "")

    member Boolean: bool option with get
    BsonRuntime.TryGetArrayChildByTypeTag(this, "Boolean", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertBoolean(Some t.BsonValue), Some t.BsonValue)))

    member Numbers: int[] with get
    BsonRuntime.GetArrayChildrenByTypeTag(this, "Number", new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Record: BsonProvider+OptionalBecauseMissing option with get
    BsonRuntime.TryGetArrayChildByTypeTag(this, "Record@b", new Func<_,_>(id)))


