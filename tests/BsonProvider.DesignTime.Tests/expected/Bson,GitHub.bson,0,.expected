class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/GitHub.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> url:string -> labelsUrl:string -> commentsUrl:string -> eventsUrl:string -> htmlUrl:string -> id2:int -> number:int -> title:string -> user:BsonProvider+User -> labels:BsonProvider+Label[] -> state:string -> assignee:MongoDB.Bson.BsonValue -> milestone:MongoDB.Bson.BsonValue -> comments:int -> createdAt:string -> updatedAt:string -> closedAt:MongoDB.Bson.BsonValue -> pullRequest:BsonProvider+PullRequest -> body:string -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("url",
                                   (url :> obj))
                                  ("labels_url",
                                   (labelsUrl :> obj))
                                  ("comments_url",
                                   (commentsUrl :> obj))
                                  ("events_url",
                                   (eventsUrl :> obj))
                                  ("html_url",
                                   (htmlUrl :> obj))
                                  ("id",
                                   (id2 :> obj))
                                  ("number",
                                   (number :> obj))
                                  ("title",
                                   (title :> obj))
                                  ("user",
                                   (user :> obj))
                                  ("labels",
                                   (labels :> obj))
                                  ("state",
                                   (state :> obj))
                                  ("assignee",
                                   (assignee :> obj))
                                  ("milestone",
                                   (milestone :> obj))
                                  ("comments",
                                   (comments :> obj))
                                  ("created_at",
                                   (createdAt :> obj))
                                  ("updated_at",
                                   (updatedAt :> obj))
                                  ("closed_at",
                                   (closedAt :> obj))
                                  ("pull_request",
                                   (pullRequest :> obj))
                                  ("body",
                                   (body :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Assignee: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "assignee")

    member Body: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "body")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ClosedAt: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "closed_at")

    member Comments: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "comments")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member CommentsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "comments_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member CreatedAt: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member EventsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "events_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member HtmlUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "html_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member Id2: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Labels: BsonProvider+Label[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "labels"), new Func<_,_>(id)))

    member LabelsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "labels_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Milestone: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "milestone")

    member Number: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "number")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member PullRequest: BsonProvider+PullRequest with get
    BsonRuntime.GetPropertyPacked(this, "pull_request")

    member State: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "state")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Title: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member UpdatedAt: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Url: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member User: BsonProvider+User with get
    BsonRuntime.GetPropertyPacked(this, "user")


class BsonProvider+Label : BsonProvider.Runtime.IBsonTop
    new : url:string -> name:string -> color:string -> BsonProvider+Label
    BsonRuntime.CreateDocument([| ("url",
                                   (url :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("color",
                                   (color :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Label
    BsonTop.Create(bsonValue, "")

    member Color: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Url: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+PullRequest : BsonProvider.Runtime.IBsonTop
    new : htmlUrl:string option -> diffUrl:string option -> patchUrl:string option -> BsonProvider+PullRequest
    BsonRuntime.CreateDocument([| ("html_url",
                                   (htmlUrl :> obj))
                                  ("diff_url",
                                   (diffUrl :> obj))
                                  ("patch_url",
                                   (patchUrl :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+PullRequest
    BsonTop.Create(bsonValue, "")

    member DiffUrl: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "diff_url"))

    member HtmlUrl: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "html_url"))

    member PatchUrl: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "patch_url"))


class BsonProvider+User : BsonProvider.Runtime.IBsonTop
    new : login:string -> id:int -> avatarUrl:string -> gravatarId:string -> url:string -> htmlUrl:string -> followersUrl:string -> followingUrl:string -> gistsUrl:string -> starredUrl:string -> subscriptionsUrl:string -> organizationsUrl:string -> reposUrl:string -> eventsUrl:string -> receivedEventsUrl:string -> type:string -> BsonProvider+User
    BsonRuntime.CreateDocument([| ("login",
                                   (login :> obj))
                                  ("id",
                                   (id :> obj))
                                  ("avatar_url",
                                   (avatarUrl :> obj))
                                  ("gravatar_id",
                                   (gravatarId :> obj))
                                  ("url",
                                   (url :> obj))
                                  ("html_url",
                                   (htmlUrl :> obj))
                                  ("followers_url",
                                   (followersUrl :> obj))
                                  ("following_url",
                                   (followingUrl :> obj))
                                  ("gists_url",
                                   (gistsUrl :> obj))
                                  ("starred_url",
                                   (starredUrl :> obj))
                                  ("subscriptions_url",
                                   (subscriptionsUrl :> obj))
                                  ("organizations_url",
                                   (organizationsUrl :> obj))
                                  ("repos_url",
                                   (reposUrl :> obj))
                                  ("events_url",
                                   (eventsUrl :> obj))
                                  ("received_events_url",
                                   (receivedEventsUrl :> obj))
                                  ("type",
                                   (type :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+User
    BsonTop.Create(bsonValue, "")

    member AvatarUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "avatar_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member EventsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "events_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member FollowersUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "followers_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member FollowingUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "following_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member GistsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "gists_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member GravatarId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "gravatar_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member HtmlUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "html_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Login: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "login")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member OrganizationsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "organizations_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ReceivedEventsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "received_events_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ReposUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "repos_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member StarredUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "starred_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SubscriptionsUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "subscriptions_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Type: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Url: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


