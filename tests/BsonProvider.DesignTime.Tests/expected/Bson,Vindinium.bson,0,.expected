class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/Vindinium.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> game:BsonProvider+Game -> hero:BsonProvider+Hero -> token:string -> viewUrl:string -> playUrl:string -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("game",
                                   (game :> obj))
                                  ("hero",
                                   (hero :> obj))
                                  ("token",
                                   (token :> obj))
                                  ("viewUrl",
                                   (viewUrl :> obj))
                                  ("playUrl",
                                   (playUrl :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Game: BsonProvider+Game with get
    BsonRuntime.GetPropertyPacked(this, "game")

    member Hero: BsonProvider+Hero with get
    BsonRuntime.GetPropertyPacked(this, "hero")

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member PlayUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "playUrl")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Token: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "token")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ViewUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "viewUrl")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Game : BsonProvider.Runtime.IBsonTop
    new : id:string -> turn:int -> maxTurns:int -> heroes:BsonProvider+Hero[] -> board:BsonProvider+Board -> finished:bool -> BsonProvider+Game
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("turn",
                                   (turn :> obj))
                                  ("maxTurns",
                                   (maxTurns :> obj))
                                  ("heroes",
                                   (heroes :> obj))
                                  ("board",
                                   (board :> obj))
                                  ("finished",
                                   (finished :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Game
    BsonTop.Create(bsonValue, "")

    member Board: BsonProvider+Board with get
    BsonRuntime.GetPropertyPacked(this, "board")

    member Finished: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "finished")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Heroes: BsonProvider+Hero[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "heroes"), new Func<_,_>(id)))

    member Id: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member MaxTurns: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "maxTurns")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Turn: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "turn")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)


class BsonProvider+Hero : BsonProvider.Runtime.IBsonTop
    new : id:int -> name:string -> userId:string -> elo:int -> pos:BsonProvider+Pos -> life:int -> gold:int -> mineCount:int -> spawnPos:BsonProvider+Pos -> crashed:bool -> BsonProvider+Hero
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("userId",
                                   (userId :> obj))
                                  ("elo",
                                   (elo :> obj))
                                  ("pos",
                                   (pos :> obj))
                                  ("life",
                                   (life :> obj))
                                  ("gold",
                                   (gold :> obj))
                                  ("mineCount",
                                   (mineCount :> obj))
                                  ("spawnPos",
                                   (spawnPos :> obj))
                                  ("crashed",
                                   (crashed :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Hero
    BsonTop.Create(bsonValue, "")

    member Crashed: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "crashed")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Elo: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "elo")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Gold: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "gold")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Id: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Life: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "life")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member MineCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "mineCount")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Pos: BsonProvider+Pos with get
    BsonRuntime.GetPropertyPacked(this, "pos")

    member SpawnPos: BsonProvider+Pos with get
    BsonRuntime.GetPropertyPacked(this, "spawnPos")

    member UserId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "userId")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Board : BsonProvider.Runtime.IBsonTop
    new : size:int -> tiles:string -> BsonProvider+Board
    BsonRuntime.CreateDocument([| ("size",
                                   (size :> obj))
                                  ("tiles",
                                   (tiles :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Board
    BsonTop.Create(bsonValue, "")

    member Size: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "size")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Tiles: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "tiles")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Pos : BsonProvider.Runtime.IBsonTop
    new : x:int -> y:int -> BsonProvider+Pos
    BsonRuntime.CreateDocument([| ("x",
                                   (x :> obj))
                                  ("y",
                                   (y :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Pos
    BsonTop.Create(bsonValue, "")

    member X: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "x")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Y: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "y")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)


