class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/WikiData.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> firstName:string -> lastName:string -> age:int -> address:BsonProvider+Address -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("firstName",
                                   (firstName :> obj))
                                  ("lastName",
                                   (lastName :> obj))
                                  ("age",
                                   (age :> obj))
                                  ("address",
                                   (address :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Address: BsonProvider+Address with get
    BsonRuntime.GetPropertyPacked(this, "address")

    member Age: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "age")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member FirstName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "firstName")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member LastName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "lastName")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Address : BsonProvider.Runtime.IBsonTop
    new : streetAddress:string -> city:string -> state:string -> postalCode:string -> BsonProvider+Address
    BsonRuntime.CreateDocument([| ("streetAddress",
                                   (streetAddress :> obj))
                                  ("city",
                                   (city :> obj))
                                  ("state",
                                   (state :> obj))
                                  ("postalCode",
                                   (postalCode :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Address
    BsonTop.Create(bsonValue, "")

    member City: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "city")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member PostalCode: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "postalCode")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member State: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "state")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member StreetAddress: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "streetAddress")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


