class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/OptionValues.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> authors:BsonProvider+Author[] -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("authors",
                                   (authors :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Authors: BsonProvider+Author[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "authors"), new Func<_,_>(id)))

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)


class BsonProvider+Author : BsonProvider.Runtime.IBsonTop
    new : name:string -> age:int option -> BsonProvider+Author
    BsonRuntime.CreateDocument([| ("name",
                                   (name :> obj))
                                  ("age",
                                   (age :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Author
    BsonTop.Create(bsonValue, "")

    member Age: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "age"))

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


