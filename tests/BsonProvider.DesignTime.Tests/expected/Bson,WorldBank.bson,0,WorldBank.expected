class BsonProvider
    static member GetSamples: () -> BsonProvider+WorldBank[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/WorldBank.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+WorldBank[]
    BsonTop.CreateList(stream)


class BsonProvider+WorldBank : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> page:int -> pages:int -> perPage:string -> total:int -> data:BsonProvider+Datum[] -> BsonProvider+WorldBank
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("page",
                                   (page :> obj))
                                  ("pages",
                                   (pages :> obj))
                                  ("per_page",
                                   (perPage :> obj))
                                  ("total",
                                   (total :> obj))
                                  ("data",
                                   (data :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+WorldBank
    BsonTop.Create(bsonValue, "")

    member Data: BsonProvider+Datum[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member Page: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Pages: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "pages")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member PerPage: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "per_page")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Total: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "total")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)


class BsonProvider+Datum : BsonProvider.Runtime.IBsonTop
    new : indicator:BsonProvider+Indicator -> country:BsonProvider+Indicator -> value:string option -> decimal:string -> date:string -> BsonProvider+Datum
    BsonRuntime.CreateDocument([| ("indicator",
                                   (indicator :> obj))
                                  ("country",
                                   (country :> obj))
                                  ("value",
                                   (value :> obj))
                                  ("decimal",
                                   (decimal :> obj))
                                  ("date",
                                   (date :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Datum
    BsonTop.Create(bsonValue, "")

    member Country: BsonProvider+Indicator with get
    BsonRuntime.GetPropertyPacked(this, "country")

    member Date: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "date")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Decimal: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "decimal")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Indicator: BsonProvider+Indicator with get
    BsonRuntime.GetPropertyPacked(this, "indicator")

    member Value: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "value"))


class BsonProvider+Indicator : BsonProvider.Runtime.IBsonTop
    new : id:string -> value:string -> BsonProvider+Indicator
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("value",
                                   (value :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Indicator
    BsonTop.Create(bsonValue, "")

    member Id: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Value: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


