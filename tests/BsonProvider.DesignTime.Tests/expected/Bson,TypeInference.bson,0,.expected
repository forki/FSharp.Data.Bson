class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/TypeInference.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> intLike:string -> boolLike1:int -> boolLike2:string -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("intLike",
                                   (intLike :> obj))
                                  ("boolLike1",
                                   (boolLike1 :> obj))
                                  ("boolLike2",
                                   (boolLike2 :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member BoolLike1: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "boolLike1")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member BoolLike2: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "boolLike2")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member IntLike: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "intLike")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


