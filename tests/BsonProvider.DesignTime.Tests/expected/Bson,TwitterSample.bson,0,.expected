class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/TwitterSample.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> createdAt:string option -> id2:int64 option -> idStr:string option -> text:string option -> source:string option -> truncated:bool option -> inReplyToStatusId:int64 option -> inReplyToStatusIdStr:string option -> inReplyToUserId:int option -> inReplyToUserIdStr:string option -> inReplyToScreenName:string option -> user:BsonProvider+User option -> geo:MongoDB.Bson.BsonValue -> coordinates:MongoDB.Bson.BsonValue -> place:BsonProvider+Place option -> contributors:MongoDB.Bson.BsonValue -> retweetedStatus:BsonProvider+RetweetedStatus option -> retweetCount:int option -> favoriteCount:int option -> entities:BsonProvider+Entities2 option -> favorited:bool option -> retweeted:bool option -> filterLevel:string option -> possiblySensitive:bool option -> lang:string option -> delete:BsonProvider+Delete option -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("created_at",
                                   (createdAt :> obj))
                                  ("id",
                                   (id2 :> obj))
                                  ("id_str",
                                   (idStr :> obj))
                                  ("text",
                                   (text :> obj))
                                  ("source",
                                   (source :> obj))
                                  ("truncated",
                                   (truncated :> obj))
                                  ("in_reply_to_status_id",
                                   (inReplyToStatusId :> obj))
                                  ("in_reply_to_status_id_str",
                                   (inReplyToStatusIdStr :> obj))
                                  ("in_reply_to_user_id",
                                   (inReplyToUserId :> obj))
                                  ("in_reply_to_user_id_str",
                                   (inReplyToUserIdStr :> obj))
                                  ("in_reply_to_screen_name",
                                   (inReplyToScreenName :> obj))
                                  ("user",
                                   (user :> obj))
                                  ("geo",
                                   (geo :> obj))
                                  ("coordinates",
                                   (coordinates :> obj))
                                  ("place",
                                   (place :> obj))
                                  ("contributors",
                                   (contributors :> obj))
                                  ("retweeted_status",
                                   (retweetedStatus :> obj))
                                  ("retweet_count",
                                   (retweetCount :> obj))
                                  ("favorite_count",
                                   (favoriteCount :> obj))
                                  ("entities",
                                   (entities :> obj))
                                  ("favorited",
                                   (favorited :> obj))
                                  ("retweeted",
                                   (retweeted :> obj))
                                  ("filter_level",
                                   (filterLevel :> obj))
                                  ("possibly_sensitive",
                                   (possiblySensitive :> obj))
                                  ("lang",
                                   (lang :> obj))
                                  ("delete",
                                   (delete :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Contributors: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "contributors")

    member Coordinates: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "coordinates")

    member CreatedAt: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "created_at"))

    member Delete: BsonProvider+Delete option with get
    BsonRuntime.TryGetPropertyPacked(this, "delete")

    member Entities: BsonProvider+Entities2 option with get
    BsonRuntime.TryGetPropertyPacked(this, "entities")

    member FavoriteCount: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "favorite_count"))

    member Favorited: bool option with get
    BsonRuntime.ConvertBoolean(BsonRuntime.TryGetPropertyUnpacked(this, "favorited"))

    member FilterLevel: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "filter_level"))

    member Geo: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "geo")

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member Id2: int64 option with get
    BsonRuntime.ConvertInteger64(BsonRuntime.TryGetPropertyUnpacked(this, "id"))

    member IdStr: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "id_str"))

    member InReplyToScreenName: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_screen_name"))

    member InReplyToStatusId: int64 option with get
    BsonRuntime.ConvertInteger64(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_status_id"))

    member InReplyToStatusIdStr: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_status_id_str"))

    member InReplyToUserId: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id"))

    member InReplyToUserIdStr: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id_str"))

    member Lang: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "lang"))

    member Place: BsonProvider+Place option with get
    BsonRuntime.TryGetPropertyPacked(this, "place")

    member PossiblySensitive: bool option with get
    BsonRuntime.ConvertBoolean(BsonRuntime.TryGetPropertyUnpacked(this, "possibly_sensitive"))

    member RetweetCount: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "retweet_count"))

    member Retweeted: bool option with get
    BsonRuntime.ConvertBoolean(BsonRuntime.TryGetPropertyUnpacked(this, "retweeted"))

    member RetweetedStatus: BsonProvider+RetweetedStatus option with get
    BsonRuntime.TryGetPropertyPacked(this, "retweeted_status")

    member Source: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "source"))

    member Text: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "text"))

    member Truncated: bool option with get
    BsonRuntime.ConvertBoolean(BsonRuntime.TryGetPropertyUnpacked(this, "truncated"))

    member User: BsonProvider+User option with get
    BsonRuntime.TryGetPropertyPacked(this, "user")


class BsonProvider+Delete : BsonProvider.Runtime.IBsonTop
    new : status:BsonProvider+Status -> BsonProvider+Delete
    BsonRuntime.CreateDocument([| ("status",
                                   (status :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Delete
    BsonTop.Create(bsonValue, "")

    member Status: BsonProvider+Status with get
    BsonRuntime.GetPropertyPacked(this, "status")


class BsonProvider+Entities2 : BsonProvider.Runtime.IBsonTop
    new : hashtags:BsonProvider+Hashtag[] -> symbols:MongoDB.Bson.BsonValue[] -> urls:BsonProvider+Url[] -> userMentions:BsonProvider+UserMention[] -> BsonProvider+Entities2
    BsonRuntime.CreateDocument([| ("hashtags",
                                   (hashtags :> obj))
                                  ("symbols",
                                   (symbols :> obj))
                                  ("urls",
                                   (urls :> obj))
                                  ("user_mentions",
                                   (userMentions :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Entities2
    BsonTop.Create(bsonValue, "")

    member Hashtags: BsonProvider+Hashtag[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "hashtags"), new Func<_,_>(id)))

    member Symbols: BsonProvider.Runtime.IBsonTop[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "symbols"), new Func<_,_>(id)))

    member Urls: BsonProvider+Url[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "urls"), new Func<_,_>(id)))

    member UserMentions: BsonProvider+UserMention[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "user_mentions"), new Func<_,_>(id)))


class BsonProvider+Place : BsonProvider.Runtime.IBsonTop
    new : id:string -> url:string -> placeType:string -> name:string -> fullName:string -> countryCode:string -> country:string -> boundingBox:BsonProvider+BoundingBox -> attributes:BsonProvider+Attributes -> BsonProvider+Place
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("url",
                                   (url :> obj))
                                  ("place_type",
                                   (placeType :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("full_name",
                                   (fullName :> obj))
                                  ("country_code",
                                   (countryCode :> obj))
                                  ("country",
                                   (country :> obj))
                                  ("bounding_box",
                                   (boundingBox :> obj))
                                  ("attributes",
                                   (attributes :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Place
    BsonTop.Create(bsonValue, "")

    member Attributes: BsonProvider+Attributes with get
    BsonRuntime.GetPropertyPacked(this, "attributes")

    member BoundingBox: BsonProvider+BoundingBox with get
    BsonRuntime.GetPropertyPacked(this, "bounding_box")

    member Country: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "country")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member CountryCode: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "country_code")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member FullName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "full_name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member PlaceType: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "place_type")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Url: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+RetweetedStatus : BsonProvider.Runtime.IBsonTop
    new : createdAt:string -> id:int64 -> idStr:string -> text:string -> source:string -> truncated:bool -> inReplyToStatusId:MongoDB.Bson.BsonValue -> inReplyToStatusIdStr:MongoDB.Bson.BsonValue -> inReplyToUserId:int option -> inReplyToUserIdStr:string option -> inReplyToScreenName:string option -> user:BsonProvider+User -> geo:MongoDB.Bson.BsonValue -> coordinates:MongoDB.Bson.BsonValue -> place:MongoDB.Bson.BsonValue -> contributors:MongoDB.Bson.BsonValue -> retweetCount:int -> favoriteCount:int -> entities:BsonProvider+Entities -> favorited:bool -> retweeted:bool -> lang:string -> possiblySensitive:bool option -> BsonProvider+RetweetedStatus
    BsonRuntime.CreateDocument([| ("created_at",
                                   (createdAt :> obj))
                                  ("id",
                                   (id :> obj))
                                  ("id_str",
                                   (idStr :> obj))
                                  ("text",
                                   (text :> obj))
                                  ("source",
                                   (source :> obj))
                                  ("truncated",
                                   (truncated :> obj))
                                  ("in_reply_to_status_id",
                                   (inReplyToStatusId :> obj))
                                  ("in_reply_to_status_id_str",
                                   (inReplyToStatusIdStr :> obj))
                                  ("in_reply_to_user_id",
                                   (inReplyToUserId :> obj))
                                  ("in_reply_to_user_id_str",
                                   (inReplyToUserIdStr :> obj))
                                  ("in_reply_to_screen_name",
                                   (inReplyToScreenName :> obj))
                                  ("user",
                                   (user :> obj))
                                  ("geo",
                                   (geo :> obj))
                                  ("coordinates",
                                   (coordinates :> obj))
                                  ("place",
                                   (place :> obj))
                                  ("contributors",
                                   (contributors :> obj))
                                  ("retweet_count",
                                   (retweetCount :> obj))
                                  ("favorite_count",
                                   (favoriteCount :> obj))
                                  ("entities",
                                   (entities :> obj))
                                  ("favorited",
                                   (favorited :> obj))
                                  ("retweeted",
                                   (retweeted :> obj))
                                  ("lang",
                                   (lang :> obj))
                                  ("possibly_sensitive",
                                   (possiblySensitive :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+RetweetedStatus
    BsonTop.Create(bsonValue, "")

    member Contributors: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "contributors")

    member Coordinates: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "coordinates")

    member CreatedAt: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Entities: BsonProvider+Entities with get
    BsonRuntime.GetPropertyPacked(this, "entities")

    member FavoriteCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorite_count")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Favorited: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorited")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Geo: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "geo")

    member Id: int64 with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger64(value.BsonOpt), value.BsonOpt)

    member IdStr: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member InReplyToScreenName: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_screen_name"))

    member InReplyToStatusId: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "in_reply_to_status_id")

    member InReplyToStatusIdStr: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "in_reply_to_status_id_str")

    member InReplyToUserId: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id"))

    member InReplyToUserIdStr: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id_str"))

    member Lang: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "lang")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Place: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "place")

    member PossiblySensitive: bool option with get
    BsonRuntime.ConvertBoolean(BsonRuntime.TryGetPropertyUnpacked(this, "possibly_sensitive"))

    member RetweetCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "retweet_count")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Retweeted: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "retweeted")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Source: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "source")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Text: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Truncated: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "truncated")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member User: BsonProvider+User with get
    BsonRuntime.GetPropertyPacked(this, "user")


class BsonProvider+User : BsonProvider.Runtime.IBsonTop
    new : id:int -> idStr:string -> name:string -> screenName:string -> location:string -> url:string option -> description:string -> protected:bool -> followersCount:int -> friendsCount:int -> listedCount:int -> createdAt:string -> favouritesCount:int -> utcOffset:int option -> timeZone:string option -> geoEnabled:bool -> verified:bool -> statusesCount:int -> lang:string -> contributorsEnabled:bool -> isTranslator:bool -> profileBackgroundColor:string -> profileBackgroundImageUrl:string -> profileBackgroundImageUrlHttps:string -> profileBackgroundTile:bool -> profileImageUrl:string -> profileImageUrlHttps:string -> profileBannerUrl:string option -> profileLinkColor:string -> profileSidebarBorderColor:string -> profileSidebarFillColor:string -> profileTextColor:string -> profileUseBackgroundImage:bool -> defaultProfile:bool -> defaultProfileImage:bool -> following:MongoDB.Bson.BsonValue -> followRequestSent:MongoDB.Bson.BsonValue -> notifications:MongoDB.Bson.BsonValue -> BsonProvider+User
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("id_str",
                                   (idStr :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("screen_name",
                                   (screenName :> obj))
                                  ("location",
                                   (location :> obj))
                                  ("url",
                                   (url :> obj))
                                  ("description",
                                   (description :> obj))
                                  ("protected",
                                   (protected :> obj))
                                  ("followers_count",
                                   (followersCount :> obj))
                                  ("friends_count",
                                   (friendsCount :> obj))
                                  ("listed_count",
                                   (listedCount :> obj))
                                  ("created_at",
                                   (createdAt :> obj))
                                  ("favourites_count",
                                   (favouritesCount :> obj))
                                  ("utc_offset",
                                   (utcOffset :> obj))
                                  ("time_zone",
                                   (timeZone :> obj))
                                  ("geo_enabled",
                                   (geoEnabled :> obj))
                                  ("verified",
                                   (verified :> obj))
                                  ("statuses_count",
                                   (statusesCount :> obj))
                                  ("lang",
                                   (lang :> obj))
                                  ("contributors_enabled",
                                   (contributorsEnabled :> obj))
                                  ("is_translator",
                                   (isTranslator :> obj))
                                  ("profile_background_color",
                                   (profileBackgroundColor :> obj))
                                  ("profile_background_image_url",
                                   (profileBackgroundImageUrl :> obj))
                                  ("profile_background_image_url_https",
                                   (profileBackgroundImageUrlHttps :> obj))
                                  ("profile_background_tile",
                                   (profileBackgroundTile :> obj))
                                  ("profile_image_url",
                                   (profileImageUrl :> obj))
                                  ("profile_image_url_https",
                                   (profileImageUrlHttps :> obj))
                                  ("profile_banner_url",
                                   (profileBannerUrl :> obj))
                                  ("profile_link_color",
                                   (profileLinkColor :> obj))
                                  ("profile_sidebar_border_color",
                                   (profileSidebarBorderColor :> obj))
                                  ("profile_sidebar_fill_color",
                                   (profileSidebarFillColor :> obj))
                                  ("profile_text_color",
                                   (profileTextColor :> obj))
                                  ("profile_use_background_image",
                                   (profileUseBackgroundImage :> obj))
                                  ("default_profile",
                                   (defaultProfile :> obj))
                                  ("default_profile_image",
                                   (defaultProfileImage :> obj))
                                  ("following",
                                   (following :> obj))
                                  ("follow_request_sent",
                                   (followRequestSent :> obj))
                                  ("notifications",
                                   (notifications :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+User
    BsonTop.Create(bsonValue, "")

    member ContributorsEnabled: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "contributors_enabled")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member CreatedAt: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member DefaultProfile: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "default_profile")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member DefaultProfileImage: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "default_profile_image")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Description: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member FavouritesCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "favourites_count")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member FollowRequestSent: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "follow_request_sent")

    member FollowersCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "followers_count")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Following: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "following")

    member FriendsCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "friends_count")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member GeoEnabled: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "geo_enabled")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Id: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member IdStr: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member IsTranslator: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "is_translator")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Lang: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "lang")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ListedCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "listed_count")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Location: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "location")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Notifications: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "notifications")

    member ProfileBackgroundColor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileBackgroundImageUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_image_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileBackgroundImageUrlHttps: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_image_url_https")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileBackgroundTile: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_tile")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member ProfileBannerUrl: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "profile_banner_url"))

    member ProfileImageUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_image_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileImageUrlHttps: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_image_url_https")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileLinkColor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_link_color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileSidebarBorderColor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_sidebar_border_color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileSidebarFillColor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_sidebar_fill_color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileTextColor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_text_color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ProfileUseBackgroundImage: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_use_background_image")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Protected: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "protected")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member ScreenName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "screen_name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member StatusesCount: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "statuses_count")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member TimeZone: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "time_zone"))

    member Url: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "url"))

    member UtcOffset: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "utc_offset"))

    member Verified: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "verified")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)


class BsonProvider+Attributes : BsonProvider.Runtime.IBsonTop
    new : () -> BsonProvider+Attributes
    BsonRuntime.CreateDocument([| |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Attributes
    BsonTop.Create(bsonValue, "")


class BsonProvider+BoundingBox : BsonProvider.Runtime.IBsonTop
    new : type:string -> coordinates:float[][][] -> BsonProvider+BoundingBox
    BsonRuntime.CreateDocument([| ("type",
                                   (type :> obj))
                                  ("coordinates",
                                   (coordinates :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+BoundingBox
    BsonTop.Create(bsonValue, "")

    member Coordinates: float[][][] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "coordinates"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.ConvertArray(t, new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.ConvertArray(t, new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertFloat(Some t.BsonValue), Some t.BsonValue)))))))

    member Type: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Entities : BsonProvider.Runtime.IBsonTop
    new : hashtags:BsonProvider+Hashtag[] -> symbols:MongoDB.Bson.BsonValue[] -> urls:BsonProvider+Url[] -> userMentions:BsonProvider+UserMention[] -> media:BsonProvider+Media[] -> BsonProvider+Entities
    BsonRuntime.CreateDocument([| ("hashtags",
                                   (hashtags :> obj))
                                  ("symbols",
                                   (symbols :> obj))
                                  ("urls",
                                   (urls :> obj))
                                  ("user_mentions",
                                   (userMentions :> obj))
                                  ("media",
                                   (media :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Entities
    BsonTop.Create(bsonValue, "")

    member Hashtags: BsonProvider+Hashtag[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "hashtags"), new Func<_,_>(id)))

    member Media: BsonProvider+Media[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "media"), new Func<_,_>(id)))

    member Symbols: BsonProvider.Runtime.IBsonTop[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "symbols"), new Func<_,_>(id)))

    member Urls: BsonProvider+Url[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "urls"), new Func<_,_>(id)))

    member UserMentions: BsonProvider+UserMention[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "user_mentions"), new Func<_,_>(id)))


class BsonProvider+Hashtag : BsonProvider.Runtime.IBsonTop
    new : text:string -> indices:int[] -> BsonProvider+Hashtag
    BsonRuntime.CreateDocument([| ("text",
                                   (text :> obj))
                                  ("indices",
                                   (indices :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Hashtag
    BsonTop.Create(bsonValue, "")

    member Indices: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Text: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Status : BsonProvider.Runtime.IBsonTop
    new : id:int64 -> userId:int -> idStr:string -> userIdStr:string -> BsonProvider+Status
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("user_id",
                                   (userId :> obj))
                                  ("id_str",
                                   (idStr :> obj))
                                  ("user_id_str",
                                   (userIdStr :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Status
    BsonTop.Create(bsonValue, "")

    member Id: int64 with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger64(value.BsonOpt), value.BsonOpt)

    member IdStr: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member UserId: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "user_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member UserIdStr: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "user_id_str")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Url : BsonProvider.Runtime.IBsonTop
    new : url:string -> expandedUrl:string -> displayUrl:string -> indices:int[] -> BsonProvider+Url
    BsonRuntime.CreateDocument([| ("url",
                                   (url :> obj))
                                  ("expanded_url",
                                   (expandedUrl :> obj))
                                  ("display_url",
                                   (displayUrl :> obj))
                                  ("indices",
                                   (indices :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Url
    BsonTop.Create(bsonValue, "")

    member DisplayUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "display_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ExpandedUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "expanded_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Indices: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Url: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+UserMention : BsonProvider.Runtime.IBsonTop
    new : screenName:string -> name:string -> id:int -> idStr:string -> indices:int[] -> BsonProvider+UserMention
    BsonRuntime.CreateDocument([| ("screen_name",
                                   (screenName :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("id",
                                   (id :> obj))
                                  ("id_str",
                                   (idStr :> obj))
                                  ("indices",
                                   (indices :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+UserMention
    BsonTop.Create(bsonValue, "")

    member Id: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member IdStr: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Indices: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ScreenName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "screen_name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Media : BsonProvider.Runtime.IBsonTop
    new : id:int64 -> idStr:string -> indices:int[] -> mediaUrl:string -> mediaUrlHttps:string -> url:string -> displayUrl:string -> expandedUrl:string -> type:string -> sizes:BsonProvider+Sizes -> sourceStatusId:int64 -> sourceStatusIdStr:string -> BsonProvider+Media
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("id_str",
                                   (idStr :> obj))
                                  ("indices",
                                   (indices :> obj))
                                  ("media_url",
                                   (mediaUrl :> obj))
                                  ("media_url_https",
                                   (mediaUrlHttps :> obj))
                                  ("url",
                                   (url :> obj))
                                  ("display_url",
                                   (displayUrl :> obj))
                                  ("expanded_url",
                                   (expandedUrl :> obj))
                                  ("type",
                                   (type :> obj))
                                  ("sizes",
                                   (sizes :> obj))
                                  ("source_status_id",
                                   (sourceStatusId :> obj))
                                  ("source_status_id_str",
                                   (sourceStatusIdStr :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Media
    BsonTop.Create(bsonValue, "")

    member DisplayUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "display_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ExpandedUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "expanded_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: int64 with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger64(value.BsonOpt), value.BsonOpt)

    member IdStr: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Indices: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member MediaUrl: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member MediaUrlHttps: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_url_https")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Sizes: BsonProvider+Sizes with get
    BsonRuntime.GetPropertyPacked(this, "sizes")

    member SourceStatusId: int64 with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "source_status_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger64(value.BsonOpt), value.BsonOpt)

    member SourceStatusIdStr: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "source_status_id_str")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Type: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Url: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Sizes : BsonProvider.Runtime.IBsonTop
    new : small:BsonProvider+Small -> thumb:BsonProvider+Small -> large:BsonProvider+Small -> medium:BsonProvider+Small -> BsonProvider+Sizes
    BsonRuntime.CreateDocument([| ("small",
                                   (small :> obj))
                                  ("thumb",
                                   (thumb :> obj))
                                  ("large",
                                   (large :> obj))
                                  ("medium",
                                   (medium :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Sizes
    BsonTop.Create(bsonValue, "")

    member Large: BsonProvider+Small with get
    BsonRuntime.GetPropertyPacked(this, "large")

    member Medium: BsonProvider+Small with get
    BsonRuntime.GetPropertyPacked(this, "medium")

    member Small: BsonProvider+Small with get
    BsonRuntime.GetPropertyPacked(this, "small")

    member Thumb: BsonProvider+Small with get
    BsonRuntime.GetPropertyPacked(this, "thumb")


class BsonProvider+Small : BsonProvider.Runtime.IBsonTop
    new : w:int -> h:int -> resize:string -> BsonProvider+Small
    BsonRuntime.CreateDocument([| ("w",
                                   (w :> obj))
                                  ("h",
                                   (h :> obj))
                                  ("resize",
                                   (resize :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Small
    BsonTop.Create(bsonValue, "")

    member H: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "h")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Resize: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "resize")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member W: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "w")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)


