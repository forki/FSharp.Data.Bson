class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/Dates.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> birthdate:System.DateTime -> anniversary:System.DateTime -> utcTime:System.DateTime -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("birthdate",
                                   (birthdate :> obj))
                                  ("anniversary",
                                   (anniversary :> obj))
                                  ("UtcTime",
                                   (utcTime :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Anniversary: System.DateTime with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "anniversary")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertDateTime(value.BsonOpt), value.BsonOpt)

    member Birthdate: System.DateTime with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "birthdate")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertDateTime(value.BsonOpt), value.BsonOpt)

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member UtcTime: System.DateTime with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "UtcTime")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertDateTime(value.BsonOpt), value.BsonOpt)


