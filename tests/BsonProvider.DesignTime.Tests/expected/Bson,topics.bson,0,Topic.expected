class BsonProvider
    static member GetSamples: () -> BsonProvider+Topic[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/topics.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Topic[]
    BsonTop.CreateList(stream)


class BsonProvider+Topic : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> photo:string -> previewLink:string option -> smallIconHover:string -> largeIcon:string -> video:string -> universityIds:string[] -> id2:int -> universities:BsonProvider+University[] -> selfServiceCourseId:int option -> shortDescription:string -> shortName:string -> categoryIds:string[] -> visibility:int option -> smallIcon:string -> instructor:string option -> categories:BsonProvider+Category[] -> name:string -> language:string -> courses:BsonProvider+Course[] -> universityLogo:string option -> courseIds:int[] -> display:bool -> subtitleLanguagesCsv:string option -> BsonProvider+Topic
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("photo",
                                   (photo :> obj))
                                  ("preview_link",
                                   (previewLink :> obj))
                                  ("small_icon_hover",
                                   (smallIconHover :> obj))
                                  ("large_icon",
                                   (largeIcon :> obj))
                                  ("video",
                                   (video :> obj))
                                  ("university-ids",
                                   (universityIds :> obj))
                                  ("id",
                                   (id2 :> obj))
                                  ("universities",
                                   (universities :> obj))
                                  ("self_service_course_id",
                                   (selfServiceCourseId :> obj))
                                  ("short_description",
                                   (shortDescription :> obj))
                                  ("short_name",
                                   (shortName :> obj))
                                  ("category-ids",
                                   (categoryIds :> obj))
                                  ("visibility",
                                   (visibility :> obj))
                                  ("small_icon",
                                   (smallIcon :> obj))
                                  ("instructor",
                                   (instructor :> obj))
                                  ("categories",
                                   (categories :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("language",
                                   (language :> obj))
                                  ("courses",
                                   (courses :> obj))
                                  ("university_logo",
                                   (universityLogo :> obj))
                                  ("course-ids",
                                   (courseIds :> obj))
                                  ("display",
                                   (display :> obj))
                                  ("subtitle_languages_csv",
                                   (subtitleLanguagesCsv :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Topic
    BsonTop.Create(bsonValue, "")

    member Categories: BsonProvider+Category[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "categories"), new Func<_,_>(id)))

    member CategoryIds: string[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "category-ids"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertString(Some t.BsonValue), Some t.BsonValue)))

    member CourseIds: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "course-ids"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Courses: BsonProvider+Course[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "courses"), new Func<_,_>(id)))

    member Display: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "display")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member Id2: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Instructor: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "instructor"))

    member Language: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "language")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member LargeIcon: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "large_icon")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Photo: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "photo")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member PreviewLink: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "preview_link"))

    member SelfServiceCourseId: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "self_service_course_id"))

    member ShortDescription: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_description")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ShortName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SmallIcon: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "small_icon")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SmallIconHover: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "small_icon_hover")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SubtitleLanguagesCsv: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "subtitle_languages_csv"))

    member Universities: BsonProvider+University[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "universities"), new Func<_,_>(id)))

    member UniversityIds: string[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "university-ids"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertString(Some t.BsonValue), Some t.BsonValue)))

    member UniversityLogo: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "university_logo"))

    member Video: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "video")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Visibility: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "visibility"))


class BsonProvider+Category : BsonProvider.Runtime.IBsonTop
    new : id:int -> name:string -> mailingListId:int option -> shortName:string -> description:string -> BsonProvider+Category
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("mailing_list_id",
                                   (mailingListId :> obj))
                                  ("short_name",
                                   (shortName :> obj))
                                  ("description",
                                   (description :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Category
    BsonTop.Create(bsonValue, "")

    member Description: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member MailingListId: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "mailing_list_id"))

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ShortName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


class BsonProvider+Course : BsonProvider.Runtime.IBsonTop
    new : gradingPolicyDistinction:string option -> aceTrackPriceDisplay:MongoDB.Bson.BsonValue -> signatureTrackCertificateDesignId:MongoDB.Bson.BsonValue -> aceSemesterHours:MongoDB.Bson.BsonValue -> startDay:int option -> durationString:string -> signatureTrackLastChanceTime:string option -> id:int -> startMonth:int option -> certificateDescription:string option -> startDateString:string option -> cheggSessionId:string -> signatureTrackRegularPrice:int option -> gradesReleaseDate:string option -> certificatesReady:bool -> signatureTrackPrice:int option -> statementDesignId:int option -> signatureTrackRegistrationOpen:bool -> topicId:int -> eligibleForSignatureTrack:bool -> startDate:string option -> record:BsonProvider+Record -> status:int -> startYear:int option -> signatureTrackCertificateCombinedSignature:string option -> endDate:MongoDB.Bson.BsonValue -> notifiedSubscribers:bool -> instructors:int[] -> active:bool -> eligibleForCertificates:bool -> signatureTrackCertificateSignatureBlurb:string -> deployed:bool -> aceCloseDate:MongoDB.Bson.BsonValue -> name:string -> textbooks:MongoDB.Bson.BsonValue[] -> signatureTrackOpenTime:string option -> eligibleForAce:bool option -> gradingPolicyNormal:string option -> aceOpenDate:MongoDB.Bson.BsonValue -> homeLink:string -> creatorId:int option -> proctoredExamCompletionDate:MongoDB.Bson.BsonValue -> universityLogo:string option -> signatureTrackCloseTime:string option -> authReviewCompletionDate:MongoDB.Bson.BsonValue -> BsonProvider+Course
    BsonRuntime.CreateDocument([| ("grading_policy_distinction",
                                   (gradingPolicyDistinction :> obj))
                                  ("ace_track_price_display",
                                   (aceTrackPriceDisplay :> obj))
                                  ("signature_track_certificate_design_id",
                                   (signatureTrackCertificateDesignId :> obj))
                                  ("ace_semester_hours",
                                   (aceSemesterHours :> obj))
                                  ("start_day",
                                   (startDay :> obj))
                                  ("duration_string",
                                   (durationString :> obj))
                                  ("signature_track_last_chance_time",
                                   (signatureTrackLastChanceTime :> obj))
                                  ("id",
                                   (id :> obj))
                                  ("start_month",
                                   (startMonth :> obj))
                                  ("certificate_description",
                                   (certificateDescription :> obj))
                                  ("start_date_string",
                                   (startDateString :> obj))
                                  ("chegg_session_id",
                                   (cheggSessionId :> obj))
                                  ("signature_track_regular_price",
                                   (signatureTrackRegularPrice :> obj))
                                  ("grades_release_date",
                                   (gradesReleaseDate :> obj))
                                  ("certificates_ready",
                                   (certificatesReady :> obj))
                                  ("signature_track_price",
                                   (signatureTrackPrice :> obj))
                                  ("statement_design_id",
                                   (statementDesignId :> obj))
                                  ("signature_track_registration_open",
                                   (signatureTrackRegistrationOpen :> obj))
                                  ("topic_id",
                                   (topicId :> obj))
                                  ("eligible_for_signature_track",
                                   (eligibleForSignatureTrack :> obj))
                                  ("start_date",
                                   (startDate :> obj))
                                  ("record",
                                   (record :> obj))
                                  ("status",
                                   (status :> obj))
                                  ("start_year",
                                   (startYear :> obj))
                                  ("signature_track_certificate_combined_signature",
                                   (signatureTrackCertificateCombinedSignature :> obj))
                                  ("end_date",
                                   (endDate :> obj))
                                  ("notified_subscribers",
                                   (notifiedSubscribers :> obj))
                                  ("instructors",
                                   (instructors :> obj))
                                  ("active",
                                   (active :> obj))
                                  ("eligible_for_certificates",
                                   (eligibleForCertificates :> obj))
                                  ("signature_track_certificate_signature_blurb",
                                   (signatureTrackCertificateSignatureBlurb :> obj))
                                  ("deployed",
                                   (deployed :> obj))
                                  ("ace_close_date",
                                   (aceCloseDate :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("textbooks",
                                   (textbooks :> obj))
                                  ("signature_track_open_time",
                                   (signatureTrackOpenTime :> obj))
                                  ("eligible_for_ACE",
                                   (eligibleForAce :> obj))
                                  ("grading_policy_normal",
                                   (gradingPolicyNormal :> obj))
                                  ("ace_open_date",
                                   (aceOpenDate :> obj))
                                  ("home_link",
                                   (homeLink :> obj))
                                  ("creator_id",
                                   (creatorId :> obj))
                                  ("proctored_exam_completion_date",
                                   (proctoredExamCompletionDate :> obj))
                                  ("university_logo",
                                   (universityLogo :> obj))
                                  ("signature_track_close_time",
                                   (signatureTrackCloseTime :> obj))
                                  ("auth_review_completion_date",
                                   (authReviewCompletionDate :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Course
    BsonTop.Create(bsonValue, "")

    member AceCloseDate: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "ace_close_date")

    member AceOpenDate: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "ace_open_date")

    member AceSemesterHours: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "ace_semester_hours")

    member AceTrackPriceDisplay: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "ace_track_price_display")

    member Active: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "active")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member AuthReviewCompletionDate: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "auth_review_completion_date")

    member CertificateDescription: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "certificate_description"))

    member CertificatesReady: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "certificates_ready")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member CheggSessionId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "chegg_session_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member CreatorId: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "creator_id"))

    member Deployed: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "deployed")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member DurationString: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "duration_string")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member EligibleForAce: bool option with get
    BsonRuntime.ConvertBoolean(BsonRuntime.TryGetPropertyUnpacked(this, "eligible_for_ACE"))

    member EligibleForCertificates: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "eligible_for_certificates")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member EligibleForSignatureTrack: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "eligible_for_signature_track")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member EndDate: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "end_date")

    member GradesReleaseDate: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "grades_release_date"))

    member GradingPolicyDistinction: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "grading_policy_distinction"))

    member GradingPolicyNormal: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "grading_policy_normal"))

    member HomeLink: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "home_link")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Id: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Instructors: int[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "instructors"), new Func<_,_>(fun (t:IBsonTop) -> BsonRuntime.GetNonOptionalValue(t.Path(), BsonRuntime.ConvertInteger(Some t.BsonValue), Some t.BsonValue)))

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member NotifiedSubscribers: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "notified_subscribers")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member ProctoredExamCompletionDate: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "proctored_exam_completion_date")

    member Record: BsonProvider+Record with get
    BsonRuntime.GetPropertyPacked(this, "record")

    member SignatureTrackCertificateCombinedSignature: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "signature_track_certificate_combined_signature"))

    member SignatureTrackCertificateDesignId: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "signature_track_certificate_design_id")

    member SignatureTrackCertificateSignatureBlurb: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track_certificate_signature_blurb")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SignatureTrackCloseTime: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "signature_track_close_time"))

    member SignatureTrackLastChanceTime: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "signature_track_last_chance_time"))

    member SignatureTrackOpenTime: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "signature_track_open_time"))

    member SignatureTrackPrice: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "signature_track_price"))

    member SignatureTrackRegistrationOpen: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track_registration_open")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member SignatureTrackRegularPrice: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "signature_track_regular_price"))

    member StartDate: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "start_date"))

    member StartDateString: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "start_date_string"))

    member StartDay: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "start_day"))

    member StartMonth: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "start_month"))

    member StartYear: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "start_year"))

    member StatementDesignId: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "statement_design_id"))

    member Status: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member Textbooks: BsonProvider.Runtime.IBsonTop[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "textbooks"), new Func<_,_>(id)))

    member TopicId: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "topic_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member UniversityLogo: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "university_logo"))


class BsonProvider+University : BsonProvider.Runtime.IBsonTop
    new : rectangularLogoSvg:string option -> wordmark:MongoDB.Bson.BsonValue -> websiteTwitter:string -> chinaMirror:int option -> favicon:string -> websiteFacebook:string -> logo:string -> backgroundColor:string -> id:int -> locationCity:string -> locationCountry:string -> locationLat:float option -> location:string -> primaryColor:string -> abbrName:string -> website:string -> description:string -> shortName:string -> landingPageBanner:string -> mailingListId:MongoDB.Bson.BsonValue -> websiteYoutube:string -> partnerType:int -> banner:string -> locationState:string -> name:string -> squareLogo:string -> squareLogoSource:string option -> squareLogoSvg:string option -> locationLng:float option -> homeLink:string option -> classLogo:string -> display:bool -> BsonProvider+University
    BsonRuntime.CreateDocument([| ("rectangular_logo_svg",
                                   (rectangularLogoSvg :> obj))
                                  ("wordmark",
                                   (wordmark :> obj))
                                  ("website_twitter",
                                   (websiteTwitter :> obj))
                                  ("china_mirror",
                                   (chinaMirror :> obj))
                                  ("favicon",
                                   (favicon :> obj))
                                  ("website_facebook",
                                   (websiteFacebook :> obj))
                                  ("logo",
                                   (logo :> obj))
                                  ("background_color",
                                   (backgroundColor :> obj))
                                  ("id",
                                   (id :> obj))
                                  ("location_city",
                                   (locationCity :> obj))
                                  ("location_country",
                                   (locationCountry :> obj))
                                  ("location_lat",
                                   (locationLat :> obj))
                                  ("location",
                                   (location :> obj))
                                  ("primary_color",
                                   (primaryColor :> obj))
                                  ("abbr_name",
                                   (abbrName :> obj))
                                  ("website",
                                   (website :> obj))
                                  ("description",
                                   (description :> obj))
                                  ("short_name",
                                   (shortName :> obj))
                                  ("landing_page_banner",
                                   (landingPageBanner :> obj))
                                  ("mailing_list_id",
                                   (mailingListId :> obj))
                                  ("website_youtube",
                                   (websiteYoutube :> obj))
                                  ("partner_type",
                                   (partnerType :> obj))
                                  ("banner",
                                   (banner :> obj))
                                  ("location_state",
                                   (locationState :> obj))
                                  ("name",
                                   (name :> obj))
                                  ("square_logo",
                                   (squareLogo :> obj))
                                  ("square_logo_source",
                                   (squareLogoSource :> obj))
                                  ("square_logo_svg",
                                   (squareLogoSvg :> obj))
                                  ("location_lng",
                                   (locationLng :> obj))
                                  ("home_link",
                                   (homeLink :> obj))
                                  ("class_logo",
                                   (classLogo :> obj))
                                  ("display",
                                   (display :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+University
    BsonTop.Create(bsonValue, "")

    member AbbrName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "abbr_name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member BackgroundColor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "background_color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Banner: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "banner")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member ChinaMirror: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "china_mirror"))

    member ClassLogo: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "class_logo")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Description: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Display: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "display")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member Favicon: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "favicon")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member HomeLink: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "home_link"))

    member Id: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member LandingPageBanner: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "landing_page_banner")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Location: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "location")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member LocationCity: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "location_city")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member LocationCountry: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "location_country")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member LocationLat: float option with get
    BsonRuntime.ConvertFloat(BsonRuntime.TryGetPropertyUnpacked(this, "location_lat"))

    member LocationLng: float option with get
    BsonRuntime.ConvertFloat(BsonRuntime.TryGetPropertyUnpacked(this, "location_lng"))

    member LocationState: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "location_state")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Logo: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "logo")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member MailingListId: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "mailing_list_id")

    member Name: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member PartnerType: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "partner_type")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member PrimaryColor: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "primary_color")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member RectangularLogoSvg: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "rectangular_logo_svg"))

    member ShortName: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SquareLogo: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "square_logo")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member SquareLogoSource: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "square_logo_source"))

    member SquareLogoSvg: string option with get
    BsonRuntime.ConvertString(BsonRuntime.TryGetPropertyUnpacked(this, "square_logo_svg"))

    member Website: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "website")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member WebsiteFacebook: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "website_facebook")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member WebsiteTwitter: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "website_twitter")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member WebsiteYoutube: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "website_youtube")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member Wordmark: BsonProvider.Runtime.IBsonTop with get
    BsonRuntime.GetPropertyPackedOrNull(this, "wordmark")


class BsonProvider+Record : BsonProvider.Runtime.IBsonTop
    new : gradeDistinction:float option -> shareForWork:bool option -> isEnrolledForProctoredExam:bool -> achievementLevel:int option -> signatureTrack:bool -> passedAce:bool -> aceGrade:int -> gradeNormal:float option -> verifyCertId:string -> authenticatedOverall:bool -> withGradeCertId:string -> BsonProvider+Record
    BsonRuntime.CreateDocument([| ("grade_distinction",
                                   (gradeDistinction :> obj))
                                  ("share_for_work",
                                   (shareForWork :> obj))
                                  ("is_enrolled_for_proctored_exam",
                                   (isEnrolledForProctoredExam :> obj))
                                  ("achievement_level",
                                   (achievementLevel :> obj))
                                  ("signature_track",
                                   (signatureTrack :> obj))
                                  ("passed_ace",
                                   (passedAce :> obj))
                                  ("ace_grade",
                                   (aceGrade :> obj))
                                  ("grade_normal",
                                   (gradeNormal :> obj))
                                  ("verify_cert_id",
                                   (verifyCertId :> obj))
                                  ("authenticated_overall",
                                   (authenticatedOverall :> obj))
                                  ("with_grade_cert_id",
                                   (withGradeCertId :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Record
    BsonTop.Create(bsonValue, "")

    member AceGrade: int with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "ace_grade")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertInteger(value.BsonOpt), value.BsonOpt)

    member AchievementLevel: int option with get
    BsonRuntime.ConvertInteger(BsonRuntime.TryGetPropertyUnpacked(this, "achievement_level"))

    member AuthenticatedOverall: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "authenticated_overall")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member GradeDistinction: float option with get
    BsonRuntime.ConvertFloat(BsonRuntime.TryGetPropertyUnpacked(this, "grade_distinction"))

    member GradeNormal: float option with get
    BsonRuntime.ConvertFloat(BsonRuntime.TryGetPropertyUnpacked(this, "grade_normal"))

    member IsEnrolledForProctoredExam: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "is_enrolled_for_proctored_exam")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member PassedAce: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "passed_ace")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member ShareForWork: bool option with get
    BsonRuntime.ConvertBoolean(BsonRuntime.TryGetPropertyUnpacked(this, "share_for_work"))

    member SignatureTrack: bool with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertBoolean(value.BsonOpt), value.BsonOpt)

    member VerifyCertId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "verify_cert_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)

    member WithGradeCertId: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "with_grade_cert_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


