class BsonProvider
    static member GetSamples: () -> BsonProvider+Root[]
    BsonTop.CreateList((File.Open("<RESOLUTION_FOLDER>/SimpleArray.bson", Open, Read, Read) :> Stream))

    static member ReadAll: stream:System.IO.Stream -> BsonProvider+Root[]
    BsonTop.CreateList(stream)


class BsonProvider+Root : BsonProvider.Runtime.IBsonTop
    new : id:MongoDB.Bson.ObjectId -> items:BsonProvider+Item[] -> BsonProvider+Root
    BsonRuntime.CreateDocument([| ("_id",
                                   (id :> obj))
                                  ("items",
                                   (items :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Root
    BsonTop.Create(bsonValue, "")

    member Id: MongoDB.Bson.ObjectId with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertObjectId(value.BsonOpt), value.BsonOpt)

    member Items: BsonProvider+Item[] with get
    BsonRuntime.ConvertArray(BsonRuntime.GetPropertyPackedOrNull(this, "items"), new Func<_,_>(id)))


class BsonProvider+Item : BsonProvider.Runtime.IBsonTop
    new : id:string -> BsonProvider+Item
    BsonRuntime.CreateDocument([| ("id",
                                   (id :> obj)) |])

    new : bsonValue:MongoDB.Bson.BsonValue -> BsonProvider+Item
    BsonTop.Create(bsonValue, "")

    member Id: string with get
    let value = BsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    BsonRuntime.GetNonOptionalValue(value.Path, BsonRuntime.ConvertString(value.BsonOpt), value.BsonOpt)


